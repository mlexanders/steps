@using Steps.Client.Features.EntityFeature.SchedulesFeature.Services
@using Steps.Shared.Contracts.GroupBlocks.ViewModels
@using Steps.Client.Features.EntityFeature.SchedulesFeature.PreScheduleFeature.Components
@using Steps.Shared.Contracts.Schedules.FinalSchedulesFeature.ViewModels

@inject FinalSchedulerManager FinalSchedulerManager
@implements IDisposable


<RadzenText Text="Финальное расписание:"/>
<RadzenCard>
    <RadzenDataGrid TItem="FinalScheduledCellViewModel" Data="FinalSchedulerManager.Data" AllowPaging="true"
                    SelectionMode="DataGridSelectionMode.Single" Style="min-width: 700px"
                    AllowSorting="true" AllowFiltering="true" AllowColumnResize="true"
                    PageSize="FinalSchedulerManager.PageSize" EmptyText="Участников в этом блоке нет"
                    IsLoading="@FinalSchedulerManager.IsLoading" Count="@FinalSchedulerManager.TotalCount"
                    LoadData="@OnChangePage">
        <Columns>
            <ScheduleColumns TView="FinalScheduledCellViewModel"/>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Parameter] public GroupBlockViewModel? GroupBlock { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (GroupBlock is null)
        {
            return;
        }

        FinalSchedulerManager.ChangedList += StateHasChanged;
        await FinalSchedulerManager.Initialize(groupBlockId: GroupBlock.Id);
    }

    public void Dispose()
    {
        FinalSchedulerManager.ChangedList -= StateHasChanged;
    }

    private async Task OnChangePage(LoadDataArgs arg)
    {
        await FinalSchedulerManager.ChangePage(arg.Skip, arg.Top);
    }
}