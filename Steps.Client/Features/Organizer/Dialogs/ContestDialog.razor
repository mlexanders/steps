@using Steps.Shared.Contracts.Contests.ViewModels
@using Steps.Shared.Contracts.Contests
@using Steps.Client.Features.Organizer.Forms
@inject IContestService ContestService
@inject DialogService DialogService

<RadzenTemplateForm TItem="ContestViewModel" Submit="SaveContest">
    <RadzenCard>
        
        <ContestForm Contest="@Contest" Title="@Title"/>
        
        <RadzenButton Text="Сохранить" Icon="save" Click="SaveContest" ButtonStyle="ButtonStyle.Primary"/>
        <RadzenButton Text="Отмена" Icon="cancel" Click="Close" ButtonStyle="ButtonStyle.Secondary" Style="margin-left: 10px;"/>
    </RadzenCard>
</RadzenTemplateForm>

@code {
    [Parameter] public ContestViewModel Contest { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    private string Title => IsNew ? "Создать мероприятие" : "Редактировать мероприятие";

    private async Task SaveContest()
    {
        if (IsNew)
        {
            var result = await ContestService.Create(new CreateContestViewModel
            {
                Name = Contest.Name,
                Description = Contest.Description,
                StartDate = DateTime.SpecifyKind(Contest.StartDate, DateTimeKind.Utc),
                EndDate = DateTime.SpecifyKind(Contest.EndDate, DateTimeKind.Utc),
            });
        }
        else
        {
            await ContestService.Update(new UpdateContestViewModel
            {
                Id = Contest.Id,
                Name = Contest.Name,
                Description = Contest.Description,
                StartDate = DateTime.SpecifyKind(Contest.StartDate, DateTimeKind.Utc),
                EndDate = DateTime.SpecifyKind(Contest.EndDate, DateTimeKind.Utc),
            });
        }
        DialogService.Close(true);
    }

    private void Close()
    {
        DialogService.Close(false);
    }
}
