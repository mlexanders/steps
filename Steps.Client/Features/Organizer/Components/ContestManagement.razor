@using Steps.Client.Features.Organizer.Dialogs
@using Steps.Shared.Contracts
@using Steps.Shared.Contracts.Contests.ViewModels
@using Steps.Shared.Contracts.Contests
@inject IContestService ContestService
@inject DialogService DialogService

<RadzenCard>
    <RadzenButton Text="Создать мероприятие" Icon="add" Click="OpenCreateDialog" Style="margin-bottom: 10px;" />
    
    <RadzenDataGrid TItem="ContestViewModel" Data="_contests" RowSelect="OpenEditDialog" AllowPaging="true" PageSize="@_pageSize"
                    IsLoading=@_isLoading Count="@_count"  LoadData="@LoadData">
        <Columns>
            <RadzenDataGridColumn TItem="ContestViewModel" Property="Name" Title="Название" />
            <RadzenDataGridColumn TItem="ContestViewModel" Property="StartDate" Title="Дата начала" />
            <RadzenDataGridColumn TItem="ContestViewModel" Property="EndDate" Title="Дата окончания" />
            <RadzenDataGridColumn TItem="ContestViewModel" Context="contest">
                <Template>
                    <RadzenButton Text="Удалить" Icon="delete" Click="() => DeleteContest(contest.Id)" ButtonStyle="ButtonStyle.Danger" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>


@code {
    private List<ContestViewModel> _contests = new();
    private int _count = 0;
    private int _pageSize = Page.DefaultPageSize;
    private bool _isLoading;
    private Page _currentPage = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await LoadContests(_currentPage);
        _isLoading = false;
    }

    private async Task LoadContests(Page page)
    {
        var result = await ContestService.GetPaged(page);
        if (result.IsSuccess)
        {
            _contests = result.Value?.Items.ToList() ?? [];
            _count = result.Value.TotalCount;
        }
    }

    private async Task OpenCreateDialog()
    {
        var result = await DialogService.OpenAsync<ContestDialog>("Создать мероприятие", new Dictionary<string, object> { { "IsNew", true } });
        if (result == true) await LoadContests(_currentPage);
    }

    private async Task OpenEditDialog(ContestViewModel contest)
    {
        var result = await DialogService.OpenAsync<ContestDialog>("Редактировать мероприятие", new Dictionary<string, object> { { "Contest", contest }, { "IsNew", false } });
        if (result == true) await LoadContests(_currentPage);
    }

    private async Task DeleteContest(Guid id)
    {
        bool? confirmed = await DialogService.Confirm("Вы уверены, что хотите удалить мероприятие?", "Удаление");
        if (confirmed == true)
        {
            await ContestService.Delete(id);
            await LoadContests(_currentPage);
        }
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        var skip = arg.Skip;
        var take = arg.Top;

        if (skip != null && take != null)
            _currentPage = new Page(skip.Value, take.Value);
            
        await LoadContests(_currentPage);
    }
}
