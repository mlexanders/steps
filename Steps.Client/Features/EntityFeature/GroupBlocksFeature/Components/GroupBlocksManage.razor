@using Steps.Client.Features.Common
@using Steps.Client.Features.EntityFeature.SchedulesFeature.PreScheduleFeature.Components
@using Steps.Client.Features.EntityFeature.SchedulesFeature.Services
@using Steps.Domain.Entities.GroupBlocks
@using Steps.Shared.Contracts.Contests.ViewModels
@using Steps.Shared.Contracts.GroupBlocks.ViewModels
@using Steps.Shared.Contracts.ScheduleFile.ViewModel

@inject PreSchedulerManager PreSchedulerManager
@inherits BaseNotificate


@if (_blocks is { Count: > 0 })
{
    <RadzenButton Text="Удалить блоки" Click="@OnDeleteBlocks"/>
    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                  Icon="edit"
                  Text="Создать файл"
                  Click="CreatePreScheduleFile"/>
    <RadzenTabs RenderMode="TabRenderMode.Client" >
        <Tabs>
            @foreach (var block in _blocks)
            {
                <RadzenTabsItem  Text="@GetTittle(block)">
                    <ScheduleByGroupBlock GroupBlock="block"/>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
}
else
{
    <RadzenText> блоков нет</RadzenText>
    
    <RadzenText> Выберите очередность выступления команд</RadzenText>

    if (_teams is null)
    {
        <RadzenButton Text="Показать команды" Click="GetTeams"/>
    }
    else
    {
        if (!_isComplete)
        {
            <OrderingTeams @bind-IsComplete="@_isComplete" @bind-Teams="@_teams"/>
        }
       else
        {
            <RadzenButton Text="Создать блоки" Click="@CreateBlocks"/>
        }
    }
}

@code{

    private async Task CreatePreScheduleFile()
    {
        var createPreScheduleFileViewModel = new CreatePreScheduleFileViewModel
        {
            GroupBlockIds = _blocks.Select(g => g.Id).ToList()
        };
    
        await PreSchedulerManager.GeneratePreScheduleFile(createPreScheduleFileViewModel);
    }

}
