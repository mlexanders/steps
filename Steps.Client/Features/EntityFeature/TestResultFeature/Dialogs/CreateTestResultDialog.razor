@using Radzen
@using Steps.Client.Features.EntityFeature.AthleteFeature.Services
@using Steps.Client.Features.EntityFeature.TestResultFeature.Services
@using Steps.Shared.Contracts.TestResults.ViewModels

@inherits Steps.Client.Features.Common.BaseModal
@inject TestResultsManager TestResultsManager
@inject AthleteManager AthleteManager

<RadzenTemplateForm TItem="CreateTestResultViewModel" Model="_createTestResultViewModel">
    <ChildContent>
        <RadzenFieldset Text="Оценки за элементы">
            <RadzenNumeric @bind-Value="_createTestResultViewModel.Scores[0]" Min="0" Max="10" Step="1"
                           Style="width: 100%" Placeholder="@ElementNames[0]"/>
            <RadzenNumeric @bind-Value="_createTestResultViewModel.Scores[1]" Min="0" Max="10" Step="1"
                           Style="width: 100%" Placeholder="@ElementNames[1]"/>
            <RadzenNumeric @bind-Value="_createTestResultViewModel.Scores[2]" Min="0" Max="10" Step="1"
                           Style="width: 100%" Placeholder="@ElementNames[2]"/>
            <RadzenNumeric @bind-Value="_createTestResultViewModel.Scores[3]" Min="0" Max="10" Step="1"
                           Style="width: 100%" Placeholder="@ElementNames[3]"/>
            <RadzenNumeric @bind-Value="_createTestResultViewModel.Scores[4]" Min="0" Max="10" Step="1"
                           Style="width: 100%" Placeholder="@ElementNames[4]"/>
        </RadzenFieldset>

        <RadzenButton Text="Сохранить" Icon="save" Click="@Create" Style="margin-top: 10px"/>
    </ChildContent>
</RadzenTemplateForm>

@code {
    private readonly CreateTestResultViewModel _createTestResultViewModel = new()
    {
        Scores = new List<int> { 0, 0, 0, 0, 0 }
    };

    private static readonly List<string> ElementNames = ["1", "2", "3", "4", "5"];

    [Parameter] public Guid ContestId { get; set; }
    [Parameter] public Guid AthleteId { get; set; }

    protected override void OnInitialized()
    {
        _createTestResultViewModel.ContestId = ContestId;
        _createTestResultViewModel.AthleteId = AthleteId;
    }

    private async Task Create()
    {
        var result = await TestResultsManager.Create(new CreateTestResultViewModel
        {
            ContestId = _createTestResultViewModel.ContestId,
            AthleteId = _createTestResultViewModel.AthleteId,
            Scores = _createTestResultViewModel.Scores
        });

        ShowResultMessage(result);

        if (result.IsSuccess) Close(true);
    }
}
