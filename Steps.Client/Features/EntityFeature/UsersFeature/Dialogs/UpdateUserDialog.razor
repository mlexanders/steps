@using Steps.Client.Features.EntityFeature.UsersFeature.Services
@using Steps.Shared.Contracts.Users.ViewModels
@using Steps.Client.Features.Common
@using Steps.Domain.Definitions
@using Steps.Shared.Utils
@using Steps.Shared.Contracts.Accounts.ViewModels

@inherits BaseModal
@inject UsersManager Manager

<RadzenTemplateForm TItem="UpdateUserViewModel" Submit="Update" Data="UpdateModel">
    <RadzenCard>
        <RadzenFieldset Text="Пользователь">
            <RadzenStack Gap="1.5rem">
                <RadzenFormField Text="Логин" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="UpdateModel.Login"/>
                </RadzenFormField>
                <RadzenFormField Text="Роль" Variant="Variant.Outlined">
                    <RadzenDropDown @bind-Value="UpdateModel.Role" TextProperty="Text" ValueProperty="Value"
                                    Data="@(Enum.GetValues<Role>().Select(r => new { Text = r.GetDisplayName(), Value = r }))"
                                    Style="width: 100%;"/>
                </RadzenFormField>
            </RadzenStack>
        </RadzenFieldset>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-4">
            <RadzenButton Text="Сохранить" IsBusy="@_isLoading" Icon="save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success"/>
            <RadzenButton Text="Отмена" Icon="cancel" Click="() => Close()" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
    </RadzenCard>
</RadzenTemplateForm>

@code {
    private bool _isLoading;
    [Parameter] public UserViewModel Model { get; set; } = null!;
    private UpdateUserViewModel UpdateModel { get; set; } = new();

    protected override void OnInitialized()
    {
        UpdateModel = new UpdateUserViewModel
        {
            Id = Model.Id,
            Login = Model.Login,
            Role = Model.Role
        };
    }

    private async Task Update()
    {
        _isLoading = true;
        var result = await Manager.Update(UpdateModel);
        ShowResultMessage(result);
        
        _isLoading = false;
        if (result.IsSuccess) Close(true);
    }
}