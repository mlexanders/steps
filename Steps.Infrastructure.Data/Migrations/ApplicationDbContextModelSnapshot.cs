// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Steps.Infrastructure.Data;

#nullable disable

namespace Steps.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "und-u-ks-primary,und-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AthleteEntryAthletesList", b =>
                {
                    b.Property<Guid>("AthletesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntryAthletesListsId")
                        .HasColumnType("uuid");

                    b.HasKey("AthletesId", "EntryAthletesListsId");

                    b.HasIndex("EntryAthletesListsId");

                    b.ToTable("AthleteEntryAthletesList");
                });

            modelBuilder.Entity("AthleteGroupBlock", b =>
                {
                    b.Property<Guid>("AthletesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("AthletesId", "GroupBlocksId");

                    b.HasIndex("GroupBlocksId");

                    b.ToTable("AthleteGroupBlock");
                });

            modelBuilder.Entity("AthletePreAthletesList", b =>
                {
                    b.Property<Guid>("AthletesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreAthletesListsId")
                        .HasColumnType("uuid");

                    b.HasKey("AthletesId", "PreAthletesListsId");

                    b.HasIndex("PreAthletesListsId");

                    b.ToTable("AthletePreAthletesList");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool?>("IsAppeared")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.EntryAthletesList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.ToTable("EntryAthletesLists");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.GeneratedAthletesList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("GeneratedAthletesLists");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.GroupBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GeneratedAthletesListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LateAthletesListId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<int>>("Numbers")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("GeneratedAthletesListId");

                    b.HasIndex("LateAthletesListId");

                    b.ToTable("GroupBlocks");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.LateAthletesList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("LateAtheletesLists");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.PreAthletesList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("PreAthletesLists");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GeneratedAthletesListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LateAthletesListId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("PreAthletesListId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Name"), new[] { "case_insensitive" });

                    b.ToTable("Contest");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntryAthletesListId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Steps.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .UseCollation("case_insensitive");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ContestId1");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("AthleteEntryAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.AthletesLists.EntryAthletesList", null)
                        .WithMany()
                        .HasForeignKey("EntryAthletesListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AthleteGroupBlock", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.AthletesLists.GroupBlock", null)
                        .WithMany()
                        .HasForeignKey("GroupBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AthletePreAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.AthletesLists.PreAthletesList", null)
                        .WithMany()
                        .HasForeignKey("PreAthletesListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steps.Domain.Entities.Athlete", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Team", null)
                        .WithMany("Athletes")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.EntryAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Entry", "Entry")
                        .WithOne("EntryAthletesList")
                        .HasForeignKey("Steps.Domain.Entities.AthletesLists.EntryAthletesList", "EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.GeneratedAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", "Contest")
                        .WithOne("GeneratedAthletesList")
                        .HasForeignKey("Steps.Domain.Entities.AthletesLists.GeneratedAthletesList", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.GroupBlock", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", "Contest")
                        .WithMany("GroupBlocks")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.AthletesLists.GeneratedAthletesList", "GeneratedAthletesList")
                        .WithMany("GroupBlocks")
                        .HasForeignKey("GeneratedAthletesListId");

                    b.HasOne("Steps.Domain.Entities.AthletesLists.LateAthletesList", "LateAthletesList")
                        .WithMany("GroupBlocks")
                        .HasForeignKey("LateAthletesListId");

                    b.Navigation("Contest");

                    b.Navigation("GeneratedAthletesList");

                    b.Navigation("LateAthletesList");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.LateAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", "Contest")
                        .WithOne("LateAthletesList")
                        .HasForeignKey("Steps.Domain.Entities.AthletesLists.LateAthletesList", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.PreAthletesList", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", "Contest")
                        .WithOne("PreAthletesList")
                        .HasForeignKey("Steps.Domain.Entities.AthletesLists.PreAthletesList", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Club", b =>
                {
                    b.HasOne("Steps.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Entry", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", "Contest")
                        .WithMany("Entries")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Team", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Club", "Club")
                        .WithMany("Teams")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Steps.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Steps.Domain.Entities.User", b =>
                {
                    b.HasOne("Steps.Domain.Entities.Contest", null)
                        .WithMany("Counters")
                        .HasForeignKey("ContestId");

                    b.HasOne("Steps.Domain.Entities.Contest", null)
                        .WithMany("Judjes")
                        .HasForeignKey("ContestId1");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.GeneratedAthletesList", b =>
                {
                    b.Navigation("GroupBlocks");
                });

            modelBuilder.Entity("Steps.Domain.Entities.AthletesLists.LateAthletesList", b =>
                {
                    b.Navigation("GroupBlocks");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Club", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Contest", b =>
                {
                    b.Navigation("Counters");

                    b.Navigation("Entries");

                    b.Navigation("GeneratedAthletesList");

                    b.Navigation("GroupBlocks");

                    b.Navigation("Judjes");

                    b.Navigation("LateAthletesList");

                    b.Navigation("PreAthletesList");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Entry", b =>
                {
                    b.Navigation("EntryAthletesList");
                });

            modelBuilder.Entity("Steps.Domain.Entities.Team", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("Steps.Domain.Entities.User", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
