@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Steps.Client.Services.Api
@using Steps.Domain.Definitions
@using Steps.Shared.Contracts.GroupBlocks.ViewModels
@using Steps.Shared.Contracts.Ratings

@inject RatingService RatingService
@inject IJSRuntime JS


<RadzenTabs RenderMode="TabRenderMode.Client">
    <Tabs>
        
        <RadzenTabsItem Text="Высшая">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.Higher)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>

        <RadzenTabsItem Text="1">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.First)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>

        <RadzenTabsItem Text="2">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.Second)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="3">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.Third)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>

        <RadzenTabsItem Text="4">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.Fourth)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>

        <RadzenTabsItem Text="За участие">
            <RatingManage Ratings="@GetByDegree(CertificateDegree.Participant)" OnPrintRatings="@OnPrint"/>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>


<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>
@code {
    private Dictionary<CertificateDegree, List<Rating>>? _ratings;
    private bool _isLoading;
    
    private HubConnection? _hubConnection { get; set; }

    [Parameter] public GroupBlockViewModel? GroupBlock { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (GroupBlock is null)
        {
            return;
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/testResultHub")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On("RatingsUpdated", async () =>
        {
            await Load(); // Метод обновления рейтингов
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await Load();
    }

    private async Task Load()
    {
        var result = await RatingService.GetRatingByBlock(GroupBlock.Id);
        var ratings = result?.Value?.NotCompleted ?? [];
        _ratings = ratings.GroupBy(r => r.CertificateDegree).ToDictionary(kvp => kvp.Key, kvp => kvp.ToList());
    }

    private List<Rating> GetByDegree(CertificateDegree d)
    {
        return _ratings?.TryGetValue(d, out var a) == true ? a : [];
    }


    private async Task OnPrint(List<Rating> ratings)
    {
        _isLoading = true;
        try
        {
            var result = await RatingService.Complete(ratings);
            await Task.Yield();
            await LoadDiploma(result?.Value);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadDiploma(DiplomasViewModel? resultValue)
    {

        if (resultValue?.FileBytes is null)
        {
            return;
        }

        var fileStream = new MemoryStream(resultValue.FileBytes);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", resultValue.FileName, streamRef);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}