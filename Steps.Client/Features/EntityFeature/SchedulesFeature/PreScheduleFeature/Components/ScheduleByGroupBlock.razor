@using Steps.Shared.Contracts.GroupBlocks.ViewModels
@using Steps.Client.Features.EntityFeature.SchedulesFeature.FinalScheduleFeature
@using Steps.Client.Features.EntityFeature.SchedulesFeature.Services
@using Steps.Shared.Contracts.Schedules.PreSchedulesFeature.ViewModels

@inject PreSchedulerManager PreSchedulerManager

@if (GroupBlock?.IsHaveFinalBlock is true)
{
    <FinalScheduleByGroupBlock GroupBlock="GroupBlock"/>
}
else
{
    <RadzenStack Gap="1rem">
        @if (!_isEditing)
        {
            <RadzenStack Gap="0.5rem">
                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText Text="Предварительное расписание" Style="font-size: 1.1rem; font-weight: 500;"/>

                            <RadzenCard>
                                <RadzenDataGrid TItem="PreScheduledCellViewModel"
                                                Data="PreSchedulerManager.Data"
                                                AllowPaging="true"
                                                SelectionMode="DataGridSelectionMode.Single"
                                                PageSize="PreSchedulerManager.PageSize"
                                                EmptyText="Участников в этом блоке нет"
                                                IsLoading="@PreSchedulerManager.IsLoading"
                                                Count="@PreSchedulerManager.TotalCount"
                                                LoadData="@OnChangePage"
                                                Style="width: 100%;"
                                                AllowColumnResize="true"
                                                AllowColumnReorder="true"
                                                AllowSort="true"
                                                ShowPagingSummary="true"
                                                PagerHorizontalAlign="HorizontalAlign.Left"
                                                PageSizeOptions="new[] { 10, 15, 20, 30, 50 }">
                                    <HeaderTemplate>
                                        <RadzenStack Gap="0.5rem">
                                            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                                          Icon="edit"
                                                          Text="Изменить порядок"
                                                          Click="OnEditing"/>
                                        </RadzenStack>
                                    </HeaderTemplate>

                                    <Columns>
                                        <ScheduleColumns TView="PreScheduledCellViewModel"/>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenCard>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        }
        else
        {
            <OrderingSchedule GroupBlock="GroupBlock" @bind-Editing="_isEditing"/>
        }

        <RadzenStack Gap="0.5rem">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText Text="Явка на мероприятие" Style="font-size: 1.1rem; font-weight: 500;"/>
                        <MarkingAthleteByGroupBlock @bind-GroupBlock="GroupBlock"/>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenStack>
}


@code {
    private bool _isEditing;

    [Parameter] public GroupBlockViewModel? GroupBlock { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PreSchedulerManager.ChangePageSize(15);
        if (GroupBlock is null)
        {
            return;
        }

        await PreSchedulerManager.Initialize(GroupBlock.Id);
    }

    private async Task OnChangePage(LoadDataArgs arg)
    {
        await PreSchedulerManager.ChangePage(arg.Skip, arg.Top);
    }

    private void OnEditing()
    {
        _isEditing = true;
    }
}
