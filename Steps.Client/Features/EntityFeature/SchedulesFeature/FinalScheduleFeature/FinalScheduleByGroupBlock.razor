@using Steps.Client.Features.EntityFeature.SchedulesFeature.Services
@using Steps.Shared.Contracts.GroupBlocks.ViewModels
@using Steps.Client.Features.EntityFeature.SchedulesFeature.PreScheduleFeature.Components
@using Steps.Domain.Entities.GroupBlocks
@using Steps.Shared
@using Steps.Shared.Contracts.Schedules.FinalSchedulesFeature.ViewModels

@implements IDisposable

<RadzenTextBox @bind-Value="fioSearch"
               Placeholder="Поиск по ФИО"
               Style="margin-bottom: 10px; width: 300px;"
               Change="OnFioSearchChanged" />
<RadzenCard>
    <RadzenDataGrid TItem="FinalScheduledCellViewModel" Data="FinalSchedulerManager.Data" AllowPaging="true"
                    SelectionMode="DataGridSelectionMode.Single" Style="min-width: 700px"
                    AllowSorting="true" AllowFiltering="true" AllowColumnResize="true"
                    PageSize="FinalSchedulerManager.PageSize" EmptyText="Участников в этом блоке нет"
                    IsLoading="@FinalSchedulerManager.IsLoading" Count="@FinalSchedulerManager.TotalCount"
                    LoadData="@OnChangePage" AllowRowSelectOnRowClick="@AllowRowSelectOnRowClick"
                    RowSelect="@OnRowSelect">
        <Columns>
            <ScheduleColumns TView="FinalScheduledCellViewModel"/>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Inject] protected FinalSchedulerManager FinalSchedulerManager { get; set; } = null!;
    [Parameter] public GroupBlockViewModel? GroupBlock { get; set; }
    [Parameter] public bool AllowRowSelectOnRowClick { get; set; }

    private FinalScheduledCellViewModel? _selectedAthlete;
    
    private string fioSearch = "";

    

    protected override async Task OnInitializedAsync()
    {
        if (GroupBlock is null)
        {
            return;
        }

        FinalSchedulerManager.ChangedList += StateHasChanged;
        await FinalSchedulerManager.Initialize(groupBlockId: GroupBlock.Id);
    }

    public void Dispose()
    {
        FinalSchedulerManager.ChangedList -= StateHasChanged;
    }
    
    private async Task OnFioSearchChanged(object value)
    {
        fioSearch = value?.ToString() ?? "";
        
        var spec = new Specification<FinalScheduledCell>();

        if (!string.IsNullOrWhiteSpace(fioSearch))
        {
            var searchTerm = fioSearch.Trim();
            spec.Where(x => x.Athlete.FullName.ToLower().Contains(searchTerm.ToLower()));
        }

        FinalSchedulerManager.UseSpecification(spec);
        await FinalSchedulerManager.ChangePage(0, FinalSchedulerManager.PageSize);
    }
    
    
    private async Task OnChangePage(LoadDataArgs args)
    {
        var spec = new Specification<FinalScheduledCell>();

        if (!string.IsNullOrWhiteSpace(fioSearch))
        {
            var searchTerm = fioSearch.Trim();
            spec.Where(x => x.Athlete.FullName.ToLower().Contains(searchTerm.ToLower()));
        }

        FinalSchedulerManager.UseSpecification(spec);
        await FinalSchedulerManager.ChangePage(args.Skip, args.Top);
    }

    protected virtual Task OnRowSelect(FinalScheduledCellViewModel? athlete)
    {
        return Task.CompletedTask;
    }

}