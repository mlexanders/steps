@using Steps.Client.Features.Organizer.UsersFeature.Services
@using Steps.Shared
@using Steps.Shared.Contracts.Accounts.ViewModels

@implements IDisposable
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
             Gap="0.5rem" class="rz-p-12">
    <RadzenLabel Text="Select Value" Component="DropDownDataGridFilteringLoadData"/>

    <RadzenDropDownDataGrid @bind-Value="@UserId" Data="@UsersManager.Data" Change="@((o) => OnChange(o))"
                            TextProperty="@nameof(UserViewModel.Login)" ValueProperty="@nameof(UserViewModel.Id)"
                            Name="DropDownDataGridTextValueProperties" IsLoading="@UsersManager.IsLoading"/>
</RadzenStack>

@code
{
    [Inject] protected UsersManager UsersManager { get; set; } = null!;

    [Parameter] public Guid UserId { get; set; }

    [Parameter] public EventCallback<Guid> UserIdChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UsersManager.ChangedList += StateHasChanged;
        await UsersManager.Initialize();
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        if (!string.IsNullOrEmpty(arg.Filter))
        {
            var filter = arg.Filter.ToLower();
            UsersManager.UseSpecification(new Specification<User>().Where(u => u.Login.Contains(filter)));
        }

        await UsersManager.ChangePage(arg.Skip, arg.Top);
    }

    private async Task OnChange(object? userId)
    {
        if (UserIdChanged.HasDelegate)
            await UserIdChanged.InvokeAsync(UserId);
    }

    public void Dispose()
    {
        UsersManager.ChangedList -= StateHasChanged;
    }
}
